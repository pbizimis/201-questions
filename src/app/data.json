{
  "questions": [
    {
      "id": "Q1",
      "lecture": "Graphs",
      "question": "DFS uses a stack as the main data structure.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Depth First Search (DFS) uses a stack (or recursion which uses the call stack) to explore vertices by going as deep as possible before backtracking."
    },
    {
      "id": "Q2",
      "lecture": "Graphs",
      "question": "The time complexity of BFS on a graph with n vertices and m edges is O(m + n).",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "BFS processes each vertex and each edge once, resulting in a total time complexity of O(n + m)."
    },
    {
      "id": "Q3",
      "lecture": "Graphs",
      "question": "In BFS, when a vertex v is dequeued, its neighbors are checked and enqueued if they have not been visited.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Upon dequeuing a vertex, BFS examines all its adjacent vertices and enqueues those that haven’t been visited yet."
    },
    {
      "id": "Q4",
      "lecture": "Graphs",
      "question": "BFS guarantees the shortest path in an unweighted graph.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Because BFS explores the graph level by level, the first time a vertex is reached is via the shortest path in an unweighted graph."
    },
    {
      "id": "Q5",
      "lecture": "Graphs",
      "question": "The BFS shortest path tree is formed by the edges (v, pred[v]) for all v where pred[v] is not null, ensuring that each reachable vertex has exactly one parent.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "In BFS, each vertex (except the source) is discovered from exactly one other vertex, forming a tree that represents the shortest paths from the source."
    },
    {
      "id": "Q6",
      "lecture": "Graphs",
      "question": "In a BFS forest, each tree represents a connected component of the graph.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "When BFS is executed on the entire graph, each tree in the resulting forest corresponds to one connected component."
    },
    {
      "id": "Q7",
      "lecture": "Graphs",
      "question": "A graph is bipartite if and only if it is 2-colorable.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "A graph can be colored with two colors such that no adjacent vertices share the same color if and only if it is bipartite."
    },
    {
      "id": "Q8",
      "lecture": "Graphs",
      "question": "The output of BFS on an entire graph is a forest, with each tree representing a connected component.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Running BFS on all vertices of a graph produces a forest where each tree covers a distinct connected component."
    },
    {
      "id": "Q9",
      "lecture": "Graphs",
      "question": "In DFS, the final time counter equals twice the number of visited vertices.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "DFS increments the time counter once when a vertex is discovered and once when it is finished, so the final time is 2 times the number of visited vertices."
    },
    {
      "id": "Q10",
      "lecture": "Graphs",
      "question": "In DFS, if DFS(u) is a recursive call made by DFS(s), then disc[s] < disc[u] and finish[s] > finish[u].",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "A parent is discovered before its child (disc[s] < disc[u]), and it finishes after all its descendants (finish[s] > finish[u])."
    },
    {
      "id": "Q11",
      "lecture": "Graphs",
      "question": "In DFS, if disc[s] < disc[u], then finish[s] < finish[u].",
      "choices": ["True", "False"],
      "correctAnswer": "False",
      "explanation": "Even though the parent is discovered before its child, the parent finishes after the child, meaning finish[s] > finish[u]."
    },
    {
      "id": "Q12",
      "lecture": "Graphs",
      "question": "If a directed graph contains a cycle, then it cannot have a topological ordering.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "A topological ordering is possible only in acyclic directed graphs; a cycle introduces a circular dependency that prevents such ordering."
    },
    {
      "id": "Q13",
      "lecture": "Graphs",
      "question": "The topological ordering of a Directed Acyclic Graph (DAG) is unique.",
      "choices": ["True", "False"],
      "correctAnswer": "False",
      "explanation": "A DAG can have multiple valid topological orderings unless additional constraints enforce a unique order."
    },
    {
      "id": "Q14",
      "lecture": "Graphs",
      "question": "There exists a graph for which the topological ordering is unique.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Some graphs, particularly those with a strict total order among vertices, have a unique topological ordering."
    },
    {
      "id": "Q15",
      "lecture": "Graphs",
      "question": "In a DFS tree, the predecessor array (pred) stores the parent of each vertex in the DFS forest.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "The predecessor array is used to record each vertex's parent, which allows the DFS tree structure to be reconstructed."
    },
    {
      "id": "Q16",
      "lecture": "Graphs",
      "question": "A DFS-based approach can be used to find a topological sort of a DAG.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Performing DFS and then ordering vertices in decreasing order of their finish times is a standard method for obtaining a topological sort in a DAG."
    },
    {
      "id": "Q17",
      "lecture": "Graphs",
      "question": "If a directed graph has a cycle, then it does not have a topological ordering.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "A cycle in a directed graph creates a circular dependency, which makes it impossible to arrange the vertices in a linear order that satisfies topological constraints."
    },
    {
      "id": "Q18",
      "lecture": "Graphs",
      "question": "A DFS forest of a DAG can have a back edge.",
      "choices": ["True", "False"],
      "correctAnswer": "False",
      "explanation": "By definition, a Directed Acyclic Graph (DAG) contains no cycles, so its DFS forest cannot include any back edges."
    },
    {
      "id": "Q19",
      "lecture": "Graphs",
      "question": "A DFS-based topological sort that pushes each vertex onto a stack upon finishing and then pops the stack to obtain the ordering runs in O(m+n) time.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "This DFS-based method processes every vertex and edge exactly once, yielding an overall time complexity of O(m+n)."
    },
    {
      "id": "Q20",
      "lecture": "Graphs",
      "question": "A DFS-based topological sort on a DAG runs in O(m+n) time.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Since the DFS-based algorithm processes each vertex and edge once, its time complexity is linear, i.e., O(m+n)."
    },
    {
      "id": "Q21",
      "lecture": "Graphs",
      "question": "A BFS-based topological sort processes vertices in order of increasing in-degree, while a DFS-based sort relies on finishing times.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "BFS-based topological sorting (Kahn’s algorithm) uses vertex in-degrees to determine processing order, whereas DFS-based sorting orders vertices based on their finish times."
    },
    {
      "id": "Q22",
      "lecture": "Graphs",
      "question": "Listing vertices in reverse order of their finish times produces a valid topological ordering.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Reversing the order in which vertices finish during DFS ensures that every vertex appears before all vertices reachable from it, satisfying the topological order."
    },
    {
      "id": "Q23",
      "lecture": "Graphs",
      "question": "Forward edges do not occur in DFS on an undirected graph.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "In undirected graphs, DFS categorizes edges as either tree edges or back edges; the concept of forward edges applies only to directed graphs."
    },
    {
      "id": "Q24",
      "lecture": "Graphs",
      "question": "Both BFS and DFS can be adapted to determine if a graph is bipartite.",
      "choices": ["True", "False"],
      "correctAnswer": "True",
      "explanation": "Both traversal methods can be modified to check for bipartiteness by attempting to color the graph with two colors and ensuring adjacent vertices receive different colors."
    },
    {
      "id": "Q25",
      "lecture": "Midterm",
      "question": "We are running a BFS search from s to t. We then clear the visited array and rerun BFS starting at t. The graph is undirected. Will s be visited again?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Graph is undirected, so if there is a path from s to t, there is a path from t to s."
    },
    {
      "id": "Q26",
      "lecture": "Midterm",
      "question": "We are running a BFS search from s to t. We then clear the visited array and rerun BFS starting at t. The graph is directed. Will s be visited again?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "Maybe",
      "explanation": "Graph is directed, but there could be a cycle from s -> t -> s."
    },
    {
      "id": "Q27",
      "lecture": "Midterm",
      "question": "We are running a BFS search from s to t. We then clear the visited array and rerun BFS starting at t. The graph is a DAG. Will s be visited again?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "Graph is directed and there is no cycle so s -> t but not t -> s."
    },
    {
      "id": "Q28",
      "lecture": "Midterm",
      "question": "There is an undirected graph G. We run DFS and have DFS forest F. Can there be an edge in G between two vertices that are layer l and layer l + 2 in F?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Since it is an undirected graph, the edge would be a back edge and can be in G but not in F because it is a non-tree edge."
    },
    {
      "id": "Q29",
      "lecture": "Midterm",
      "question": "There is a directed graph G. We run BFS and have BFS shortest path tree F. Can there be an edge in G between two vertices that are layer l+2 and layer l in F?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "The edge would be a back edge and in G but is a non-tree edge and not in F."
    },
    {
      "id": "Q30",
      "lecture": "Midterm",
      "question": "Graph G is undirected and contains a back edge. We reorder vertices but keep edges. Is there still a back edge in G?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Since edges don't change, back edges will stay back edges."
    },
    {
      "id": "Q31",
      "lecture": "More Midterm",
      "question": "In a directed graph G with a cycle, if we run DFS from any vertex in the cycle, will a back edge always be detected?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "A cycle guarantees that DFS will eventually revisit a vertex on the recursion stack, thereby finding a back edge."
    },
    {
      "id": "Q32",
      "lecture": "More Midterm",
      "question": "We perform DFS on an undirected graph G starting from vertex s and obtain a DFS forest F. Can there be an edge connecting vertices in different trees of F?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "In an undirected graph, an edge between vertices in different trees would mean they are connected, so they should belong to the same DFS tree."
    },
    {
      "id": "Q33",
      "lecture": "More Midterm",
      "question": "Given a directed acyclic graph (DAG) G, if we run DFS from vertex s, can there be any back edges in the DFS forest?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "By definition, a DAG contains no cycles, so DFS cannot encounter any back edges."
    },
    {
      "id": "Q34",
      "lecture": "More Midterm",
      "question": "In an undirected graph G, if we run BFS from vertex s to compute shortest paths, can an extra edge (u, v) that is not part of the BFS tree ever lie on a shortest path from s to some vertex?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "Maybe",
      "explanation": "Depending on the graph's structure, the extra edge might provide an alternative route that is equally short as the one in the BFS tree."
    },
    {
      "id": "Q35",
      "lecture": "More Midterm",
      "question": "Consider a directed graph G. If we run BFS from vertex s, is it possible for an edge to exist in G that connects a vertex in layer l+1 to a vertex in layer l-1 in the BFS tree?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Such an edge is a cross edge that does not disrupt the BFS layer structure but still exists in the graph."
    },
    {
      "id": "Q36",
      "lecture": "MST",
      "question": "Can there be a minimum spanning tree for a DAG?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "Minimum spanning trees are defined for undirected weighted graphs."
    },
    {
      "id": "Q37",
      "lecture": "Greedy",
      "question": "Beneath every greedy algorithm, there is almost always a more cumbersome DP solution.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "True"
    },
    {
      "id": "Q38",
      "lecture": "Shortest Paths",
      "question": "You have an unweighted graph G. Will BFS and Dijkstra's algorithm lead to the same result?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "An unweighted graph can be represented as a graph with the same edge weight for all edges."
    },
    {
      "id": "Q39",
      "lecture": "Shortest Paths",
      "question": "You can use the distance label est[v] for s to t to calculate the path.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "The distance label est[v] is >= dist[v] but it only saves the weight, not the predecessor. You would use pred[v]... for that."
    },
    {
      "id": "Q40",
      "lecture": "Shortest Paths",
      "question": "An SSSP algorithm is a sequence of relax operations.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Book chapters on that are pretty good. All algorithms that we discussed are updating distance labels (relax operations)."
    },
    {
      "id": "Q41",
      "lecture": "Shortest Paths",
      "question": "You have a graph with negative weight cycles. Is there an algorithm that can find the cycle?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Yes, you can use Bellman-Ford to find the negative weight cycle."
    },
    {
      "id": "Q42",
      "lecture": "Shortest Paths",
      "question": "Does Bellman-Ford on a graph with a negative weight cycle give at least one shortest path?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "The algorithm is designed to only output the shortest paths if there are no negative weight cycles."
    },
    {
      "id": "Q43",
      "lecture": "Shortest Paths",
      "question": "Can you run Bellman-Ford on an undirected graph?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "You can run Bellman-Ford on an undirected graph but if the graph has any negative edge then it will count as a cycle and only the cycle will be found, not any shortest paths."
    },
    {
      "id": "Q44",
      "lecture": "Shortest Paths",
      "question": "Can you run Bellman-Ford on an undirected graph with only positive weights?",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "Yes you can but at this point you would prefer to use Dijkstra's algorithm."
    },
    {
      "id": "Q45",
      "lecture": "Shortest Paths",
      "question": "You can run Dijkstra's algorithm on directed and undirected graphs.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "True because any undirected graph is essentially a directed graph with bidirectional connections."
    },
    {
      "id": "Q46",
      "lecture": "Shortest Paths",
      "question": "There is no longer distance between u and v than n-1.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "True because if we have a n vertices, n-1 would visit all vertices between u and v."
    },
    {
      "id": "Q47",
      "lecture": "Shortest Paths",
      "question": "You can find a SSSP in a DAG.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "True",
      "explanation": "True because you can relax the edges of a DAG according to a topological sort of its vertices. Topological sort the DAG -> one relaxation pass over all vertices in the topological sorted order. Total is O(V+E)."
    },
    {
      "id": "Q48",
      "lecture": "Shortest Paths",
      "question": "Floxd-Warshall algorithm only works with nonnegative weights.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "The algorithm works for negative weights but no negative weight cycles."
    },
    {
      "id": "Q49",
      "lecture": "Shortest Paths",
      "question": "The single-destination shortest path problem is to find a shortest path to a given destination vertex t from each vertex s. This problem is NP hard.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "We can simply reverse the each edge in the directed graph and can reduce this problem to a SSSP problem. (The NP hard statement was just a bait. No NP stuff on the final.)"
    },
    {
      "id": "Q50",
      "lecture": "Shortest Paths",
      "question": "Shortest paths can contain cycles.",
      "choices": ["True", "False", "Maybe"],
      "correctAnswer": "False",
      "explanation": "Shortest paths in general cannot contain any cycles (negative, positive or 0-weight). 0-weight cycles, you can always remove the 0-weight cycle to get a shorter or equally short path with fewer edges."
    },
    {
      "id": "Q51",
      "lecture": "Divide and Conquer",
      "question": "There will probably be a question about writing a recurrence or solving a recurrence in the final. Here are some D&C algorithms you can look at:",
      "choices": [
        "Merge Sort",
        "Quick Sort",
        "Binary Search",
        "Strassen's Matrix Multiplication",
        "Karatsuba's Multiplication",
        "Fast Fourier Transform (FFT)",
        "Exponentiation by Squaring"
      ],
      "correctAnswer": "False",
      "explanation": "Shortest paths in general cannot contain any cycles (negative, positive or 0-weight)."
    },
    {
      "id": "Q52",
      "lecture": "DP Recurrences",
      "question": "Last time Sesh took a recurrence from the website he posted the day before. I would take a look at them again.",
      "choices": [
        "https://www.geeksforgeeks.org/top-50-dynamic-programming-coding-problems-for-interviews/"
      ],
      "correctAnswer": "False",
      "explanation": ""
    }
  ]
}
